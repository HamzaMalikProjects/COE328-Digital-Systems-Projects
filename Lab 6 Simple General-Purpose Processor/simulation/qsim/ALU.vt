// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/01/2022 16:36:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALUproblem2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALUproblem2_vlg_sample_tst(
	A,
	B,
	Clk,
	OP,
	student_id,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  Clk;
input [15:0] OP;
input [3:0] student_id;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Clk or OP or student_id)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALUproblem2_vlg_check_tst (
	Neg,
	R1,
	R2,
	sampler_rx
);
input  Neg;
input [3:0] R1;
input [3:0] R2;
input sampler_rx;

reg  Neg_expected;
reg [3:0] R1_expected;
reg [3:0] R2_expected;

reg  Neg_prev;
reg [3:0] R1_prev;
reg [3:0] R2_prev;



reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Neg_prev = Neg;
	R1_prev = R1;
	R2_prev = R2;
end

// update expected /o prevs

always @(trigger)
begin
end


// expected student_id[ 3 ]
initial
begin
	student_id_expected[3] = 1'bX;
end 
// expected student_id[ 2 ]
initial
begin
	student_id_expected[2] = 1'bX;
end 
// expected student_id[ 1 ]
initial
begin
	student_id_expected[1] = 1'bX;
end 
// expected student_id[ 0 ]
initial
begin
	student_id_expected[0] = 1'bX;
end 
// generate trigger
always @(Neg_expected or Neg or R1_expected or R1 or R2_expected or R2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Neg = %b | expected R1 = %b | expected R2 = %b | ",Neg_expected_prev,R1_expected_prev,R2_expected_prev);
	$display("| real Neg = %b | real R1 = %b | real R2 = %b | ",Neg_prev,R1_prev,R2_prev);
`endif

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALUproblem2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Clk;
reg [15:0] OP;
reg [3:0] student_id;
// wires                                               
wire Neg;
wire [3:0] R1;
wire [3:0] R2;

wire sampler;                             

// assign statements (if any)                          
ALUproblem2 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Clk(Clk),
	.Neg(Neg),
	.OP(OP),
	.R1(R1),
	.R2(R2),
	.student_id(student_id)
);

ALUproblem2_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Clk(Clk),
	.OP(OP),
	.student_id(student_id),
	.sampler_tx(sampler)
);

ALUproblem2_vlg_check_tst tb_out(
	.Neg(Neg),
	.R1(R1),
	.R2(R2),
	.sampler_rx(sampler)
);
endmodule

