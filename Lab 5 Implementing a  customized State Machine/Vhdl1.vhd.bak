library.ieee;
use ieee.std_logic_1164.all;
entity machine is
	port
	(
		clk     : in std_logic;
		data_in : in std_logic;
		reset   : in std_logic;
		student_id : std_logic_vector (3 downto 0);
		current_state: out std_logic_vector (3 downto 0);
	);
end entity;
architecture fsm of machine is
	--Build an emunerated type with 9 states for the state machine ( 9 states for parsing 9 digits of student id )
	type state_type is (s0, s1, s2, s3, s4, s5, s6, s7, s8);
	--Register to hold the current state
	signal yfsm  : state_type;
begin
	process (clk, reset)
	begin
		if reset = '1' then
			yfsm <= s0;
		elsif (clk'EVENT AND clk = '1') then
			--Determine the next state synchronously, based on the current state and the input
			case yfsm is
				when s0 =>
				if (data_in='0')then sm<=s0 ;
				else yfsm<= s8;
				end if;
				
				when s1 =>
				if (data_in='0')then sm<=s1 ;
				else yfsm<= s0;
				end if;
				
				when s2 =>
				if (data_in='0')then sm<=s2 ;
				else yfsm<= s7;
				end if;
				
				when s3 =>
				if (data_in='0')then sm<=s3 ;
				else yfsm<= s1;
				end if;
				
				when s4 =>
				if (data_in='0')then sm<=s4 ;
				else yfsm<= s2;
				end if;
				
				when s5 =>
				if (data_in='0')then sm<=s5 ;
				else yfsm<= s3;
				end if;
				
				when s6 =>
				if (data_in='0')then sm<=s6 ;
				else yfsm<= s4;
				end if;
				
				when s7 =>
				if (data_in='0')then sm<=s7 ;
				else yfsm<= s5;
				end if;
				
				when s8 =>
				if (data_in='0')then sm<=s8 ;
				else yfsm<= s6;
			end case;
		end if;
	end process;
	--Implement the Moore or Mealy logic here
	process (yfsm, data_in) --data_in if reqd only
	begin
		case yfsm is
		when s0 =>
		when s1 =>
		when s2 =>
		when s8 =>
	end case;
	end process;
